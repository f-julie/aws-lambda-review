AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "bloomtech-analytics"
Description: ""
Resources:
    DynamoDBTable:
        Type: "AWS::DynamoDB::Table"
        Properties:
            AttributeDefinitions: 
              - 
                AttributeName: "id"
                AttributeType: "S"
            TableName: "Analytics_User_Activity_Tracking"
            KeySchema: 
              - 
                AttributeName: "id"
                KeyType: "HASH"
            ProvisionedThroughput: 
                ReadCapacityUnits: 5
                WriteCapacityUnits: 5
    IAMManagedPolicy:
        DeletionPolicy: "Retain"
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: "AWSLambdaBasicExecutionRole-Analytics"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "VisualEditor0",
                            "Effect": "Allow",
                            "Action": [
                                "dynamodb:PutItem",
                                "dynamodb:GetItem",
                                "logs:CreateLogGroup"
                            ],
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*",
                                "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Analytics_User_Activity_Tracking"
                            ]
                        },
                        {
                            "Sid": "VisualEditor1",
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-dynamodb-analytics:*"
                        }
                    ]
                }

    IAMRole:
        DeletionPolicy: "Retain"
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: "aws-lambda-dynamodb-analytics-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"lambda.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy
    ApiGatewayRestApi:
        DeletionPolicy: "Retain"
        Type: "AWS::ApiGateway::RestApi"
        Properties:
            Name: "analytics"
            ApiKeySourceType: "HEADER"
            EndpointConfiguration: 
                Types: 
                  - "REGIONAL"
    ApiGatewayMethod:
        DeletionPolicy: "Retain"
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
            HttpMethod: "POST"
            OperationName: "saveactivity"
            AuthorizationType: "NONE"
            ApiKeyRequired: false
            MethodResponses: 
              - 
                ResponseModels: 
                    "application/json": "Empty"
                StatusCode: "200"
            Integration: 
                CacheNamespace: "64atwt"
                ContentHandling: "CONVERT_TO_TEXT"
                IntegrationHttpMethod: "POST"
                IntegrationResponses: 
                  - 
                    ResponseTemplates: {}
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_TEMPLATES"
                RequestTemplates: 
                    "application/json": |
                        {
                          "body" : $input.json('$'),
                          "headers": {
                            #foreach($header in $input.params().header.keySet())
                            "$header": "$util.escapeJavaScript($input.params().header.get($header))" #if($foreach.hasNext),#end
                        
                            #end
                          },
                          "method": "$context.httpMethod",
                          "params": {
                            #foreach($param in $input.params().path.keySet())
                            "$param": "$util.escapeJavaScript($input.params().path.get($param))" #if($foreach.hasNext),#end
                        
                            #end
                          },
                          "query": {
                            #foreach($queryParam in $input.params().querystring.keySet())
                            "$queryParam": "$util.escapeJavaScript($input.params().querystring.get($queryParam))" #if($foreach.hasNext),#end
                        
                            #end
                          }  
                        }
                TimeoutInMillis: 29000
                Type: "AWS"
                Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:aws-lambda-dynamodb-analytics/invocations"

    ApiGatewayMethod2:
        DeletionPolicy: "Retain"
        Type: "AWS::ApiGateway::Method"
        Properties:
            RestApiId: !Ref ApiGatewayRestApi
            ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
            HttpMethod: "OPTIONS"
            AuthorizationType: "NONE"
            OperationName: "saveactivity"
            ApiKeyRequired: false
            RequestParameters: {}
            MethodResponses: 
              - 
                ResponseModels: 
                    "application/json": "Empty"
                ResponseParameters: 
                    "method.response.header.Access-Control-Allow-Headers": false
                    "method.response.header.Access-Control-Allow-Methods": false
                    "method.response.header.Access-Control-Allow-Origin": false
                StatusCode: "200"
            Integration: 
                CacheNamespace: "64atwt"
                IntegrationResponses: 
                  - 
                    ResponseParameters: 
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                        "method.response.header.Access-Control-Allow-Methods": "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                        "method.response.header.Access-Control-Allow-Origin": "'*'"
                    StatusCode: "200"
                PassthroughBehavior: "WHEN_NO_MATCH"
                RequestTemplates: 
                    "application/json": "{\"statusCode\": 200}"
                TimeoutInMillis: 29000
                Type: "MOCK"

