package com.bloomtech.analytics.db;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import java.io.IOException;
import java.util.HashMap;

import org.apache.log4j.Logger;

@DynamoDBTable(tableName = "Analytics_User_Activity_Tracking")
public class UserActivity {

    // The table name can also be obtained from the env variable
    // defined in the lambda configuration
    private static final String TABLE_NAME = "Analytics_User_Activity_Tracking";

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private Logger logger = Logger.getLogger(this.getClass());

    private String id;
    private long timestamp;
    private String eventId;
    private String eventType;
    private String screenName;
    private String eventValue;
    private String userId;

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }
    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "timestamp")
    public long getTimestamp() {
        return this.timestamp;
    }
    public void setTimestamp(long timestamp) {
        this.timestamp = timestamp;
    }

    @DynamoDBAttribute(attributeName = "eventId")
    public String getEventId() {
        return this.eventId;
    }
    public void setEventId(String eventId) {
        this.eventId = eventId;
    }

    @DynamoDBAttribute(attributeName = "eventType")
    public String getEventType() {
        return this.eventType;
    }
    public void setEventType(String eventType) {
        this.eventType = eventType;
    }

    @DynamoDBAttribute(attributeName = "screenName")
    public String getScreenName() {
        return this.screenName;
    }
    public void setScreenName(String screenName) {
        this.screenName = screenName;
    }

    @DynamoDBAttribute(attributeName = "eventValue")
    public String getEventValue() {
        return this.eventValue;
    }
    public void setEventValue(String eventValue) {
        this.eventValue = eventValue;
    }

    @DynamoDBAttribute(attributeName = "userId")
    public String getUserId() {
        return this.userId;
    }
    public void setUserId(String userId) {
        this.userId = userId;
    }

    public UserActivity() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(TABLE_NAME))
            .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("UserActivity [id=%s, screen=%s, eventType=%s, eventValue=%s]", this.id, this.screenName, this.eventType, this.eventValue);
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public UserActivity get(String id) throws IOException {
        UserActivity userActivity = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<UserActivity> queryExp = new DynamoDBQueryExpression<UserActivity>()
            .withKeyConditionExpression("id = :v1")
            .withExpressionAttributeValues(av);

        PaginatedQueryList<UserActivity> result = this.mapper.query(UserActivity.class, queryExp);
        if (result.size() > 0) {
            userActivity = result.get(0);
          logger.info("UserActivity - get(): userActivity - " + userActivity.toString());
        } else {
          logger.info("UserActivity - get(): userActivity - Not Found.");
        }
        return userActivity;
    }

    public void save(UserActivity userActivity) throws IOException {
        logger.info("UserActivity - save(): " + userActivity.toString());
        this.mapper.save(userActivity);
    }
}
